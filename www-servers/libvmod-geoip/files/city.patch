diff --git a/README.rst b/README.rst
index b9ef0cd..48668d9 100644
--- a/README.rst
+++ b/README.rst
@@ -1,3 +1,13 @@
+This was taken from https://github.com/lampeh/libvmod-geoip/pull/7
+
+Only the following functions are exported, the rest is deleted: 
+client_country_code,
+country_code,
+client_city_region_name,
+city_region_name.
+
+
+
 ==========
 vmod_geoip
 ==========
@@ -44,22 +54,6 @@ Example
 
                 set req.http.X-Country-Code = geoip.client_country_code();
 
-ip_country_code (not exported yet)
-----------------------------------
-
-Prototype
-        ::
-
-                ip_country_code(IP I)
-Return value
-	STRING
-Description
-	Returns two-letter country code string from IP address
-Example
-        ::
-
-                set req.http.X-Country-Code = geoip.ip_country_code(client.ip);
-
 country_code
 ------------
 
@@ -77,102 +71,37 @@ Example
                 set req.http.X-Country-Code = geoip.country_code("127.0.0.1");
 
 
-client_country_name
--------------------
-
-Prototype
-        ::
-
-                client_country_name()
-Return value
-	STRING
-Description
-	Returns country name string from client IP address
-Example
-        ::
-
-                set req.http.X-Country-Name = geoip.client_country_name();
-
-ip_country_name (not exported yet)
-----------------------------------
-
-Prototype
-        ::
-
-                ip_country_name(IP I)
-Return value
-	STRING
-Description
-	Returns country name string from IP address
-Example
-        ::
-
-                set req.http.X-Country-Name = geoip.ip_country_name(client.ip);
-
-country_name
-------------
-
-Prototype
-        ::
-
-                country_name(STRING S)
-Return value
-	STRING
-Description
-	Returns country name string
-Example
-        ::
-
-                set req.http.X-Country-Name = geoip.country_name("127.0.0.1");
-
-
-client_region_name (not exported yet)
--------------------------------------
-
-Prototype
-        ::
-
-                client_region_name()
-Return value
-	STRING
-Description
-	Returns region name string from client IP address
-Example
-        ::
-
-                set req.http.X-Region-Name = geoip.client_region_name();
-
-ip_region_name (not exported yet)
----------------------------------
+client_city_region_name
+-----------------------
 
 Prototype
         ::
 
-                ip_region_name(IP I)
+                client_city_region_name()
 Return value
 	STRING
 Description
-	Returns region name string from IP address
+	Returns region name string from client IP address using the GeoIPCity.dat database
 Example
         ::
 
-                set req.http.X-Region-Name = geoip.ip_region_name(client.ip);
+                set req.http.X-Region-Name = geoip.client_city_region_name();
 
-region_name (not exported yet)
+city_region_name
 ------------------------------
 
 Prototype
         ::
 
-                region_name(STRING S)
+                city_region_name(STRING S)
 Return value
 	STRING
 Description
-	Returns region name string
+	Returns region name string from given IP address using the GeoIPCity.dat database
 Example
         ::
 
-                set req.http.X-Region-Name = geoip.region_name("127.0.0.1");
+                set req.http.X-Region-Name = geoip.city_region_name("127.0.0.1");
 
 
 INSTALLATION
@@ -186,6 +115,17 @@ Install the GeoIP library headers::
 
  apt-get install libgeoip-dev
 
+If you want to be able to use the city_region_name() and
+client_city_region_name() functions, you will need to download the
+GeoIPCity.dat (subscription) or GeoLiteCity.dat (free) databases from
+MaxMind (http://geolite.maxmind.com/download/geoip/database/).
+If you go with GeoLiteCity.dat, be sure to create a simlink named
+GeoIPCity.dat that points to GeoLiteCity.dat in the directory where
+GeoIP.dat resides (typically in /usr/local/share/GeoIP/). If you do
+not install this database, the third unit test will fail but you
+will still be able to use the country code and country name
+functions without a problem.
+
 To check out the current development source::
 
  git clone git://github.com/lampeh/libvmod-geoip.git
@@ -222,8 +162,8 @@ In your VCL you could then use this vmod along the following lines::
 HISTORY
 =======
 
-No history yet.
-
+* Region code functionality based on the GeoIPCity/GeoCityLite databases
+from MaxMind were contributed by developers from www.dnainfo.com.
 
 COPYRIGHT
 =========
diff --git a/src/tests/test03.vtc b/src/tests/test03.vtc
new file mode 100644
index 0000000..acf7ca4
--- /dev/null
+++ b/src/tests/test03.vtc
@@ -0,0 +1,22 @@
+varnishtest "Test geoip vmod"
+
+server s1 {
+       rxreq
+       txresp
+} -start
+
+varnish v1 -vcl+backend {
+	import geoip from "${vmod_topbuild}/src/.libs/libvmod_geoip.so";
+
+	sub vcl_deliver {
+		set resp.http.X-Region = geoip.city_region_name("38.108.216.154");
+	}
+} -start
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.http.X-Region == "NY"
+}
+
+client c1 -run
diff --git a/src/vmod_geoip.c b/src/vmod_geoip.c
index 41c29c7..000256d 100644
--- a/src/vmod_geoip.c
+++ b/src/vmod_geoip.c
@@ -10,7 +10,7 @@
 
 #include <stdlib.h>
 #include <GeoIP.h>
-
+#include <GeoIPCity.h>
 #include "vrt.h"
 #include "vrt_obj.h"
 #include "bin/varnishd/cache.h"
@@ -21,108 +21,110 @@
 // The default string in case the GeoIP lookup fails
 #define GI_UNKNOWN_STRING "Unknown"
 
+struct geoip_handlers {
+	GeoIP *gi_country;
+	GeoIP *gi_city;
+};
 
-int
-init_function(struct vmod_priv *pp, const struct VCL_conf *conf)
+void
+vmod_geoip_free(void* data)
 {
-	// first call to lookup functions initializes pp
-	return (0);
-}
+	struct geoip_handlers *handlers = (struct geoip_handlers *) data;
 
-static void
-init_priv(struct vmod_priv *pp) {
-	// The README says:
-	// If GEOIP_MMAP_CACHE doesn't work on a 64bit machine, try adding
-	// the flag "MAP_32BIT" to the mmap call. MMAP is not avail for WIN32.
-	pp->priv = GeoIP_new(GEOIP_MMAP_CACHE);
-	if (pp->priv != NULL) {
-		pp->free = (vmod_priv_free_f *)GeoIP_delete;
-		GeoIP_set_charset((GeoIP *)pp->priv, GEOIP_CHARSET_UTF8);
+	if (!handlers) {
+		return;
 	}
-}
 
+	if(handlers->gi_country) GeoIP_delete(handlers->gi_country);
+	if(handlers->gi_city) GeoIP_delete(handlers->gi_city);
 
-const char *
-vmod_country_code(struct sess *sp, struct vmod_priv *pp, const char *ip)
+	free(handlers);
+}
+
+int
+init_function(struct vmod_priv *pp, const struct VCL_conf *conf)
 {
-	const char* country = NULL;
+	struct geoip_handlers *handlers = calloc(1, sizeof(*handlers));
 
-	if (!pp->priv) {
-		init_priv(pp);
-	}
+	if(!handlers) return 1;
 
-	if (ip) {
-		country = GeoIP_country_code_by_addr((GeoIP *)pp->priv, ip);
-	}
+	handlers->gi_country = NULL;
+	handlers->gi_city = NULL;
 
-	return(WS_Dup(sp->wrk->ws, (country ? country : GI_UNKNOWN_STRING)));
-}
+	handlers->gi_country = GeoIP_open_type(GEOIP_COUNTRY_EDITION, GEOIP_MMAP_CACHE);
+	if(!handlers->gi_country) return 1;
 
-const char *
-vmod_client_country_code(struct sess *sp, struct vmod_priv *pp) {
-	return vmod_country_code(sp, pp, VRT_IP_string(sp, VRT_r_client_ip(sp)));
-}
+	handlers->gi_city = GeoIP_open_type(GEOIP_CITY_EDITION_REV1, GEOIP_MMAP_CACHE);
+	if(!handlers->gi_city) return 1;
 
-const char *
-vmod_ip_country_code(struct sess *sp, struct vmod_priv *pp, struct sockaddr_storage *ip) {
-	return vmod_country_code(sp, pp, VRT_IP_string(sp, ip));
-}
+	pp->priv = handlers;
+	pp->free = vmod_geoip_free;
 
+	return (0);
+}
 
 const char *
-vmod_country_name(struct sess *sp, struct vmod_priv *pp, const char *ip)
+vmod_country_code(struct sess *sp, struct vmod_priv *pp, const char *ip)
 {
 	const char* country = NULL;
+	char *tmp = NULL;
+	GeoIP *gi_country = NULL;
+	struct geoip_handlers *handlers = (struct geoip_handlers *) pp->priv;
 
-	if (!pp->priv) {
-		init_priv(pp);
+	if(handlers) {
+		gi_country = (GeoIP *) handlers->gi_country;
 	}
 
-	if (ip) {
-		country = GeoIP_country_name_by_addr((GeoIP *)pp->priv, ip);
+	if (ip && gi_country) {
+		tmp = GeoIP_country_code_by_addr(gi_country, ip);
+
+		if(tmp) {
+			country = WS_Dup(sp->wrk->ws, tmp);
+		}
 	}
 
-	return(WS_Dup(sp->wrk->ws, (country ? country : GI_UNKNOWN_STRING)));
-}
+	if(!country) {
+		country = WS_Dup(sp->wrk->ws, GI_UNKNOWN_STRING);
+	}
 
-const char *
-vmod_client_country_name(struct sess *sp, struct vmod_priv *pp) {
-	return vmod_country_name(sp, pp, VRT_IP_string(sp, VRT_r_client_ip(sp)));
+	return(country);
 }
 
 const char *
-vmod_ip_country_name(struct sess *sp, struct vmod_priv *pp, struct sockaddr_storage *ip) {
-	return vmod_country_name(sp, pp, VRT_IP_string(sp, ip));
+vmod_client_country_code(struct sess *sp, struct vmod_priv *pp) {
+	return vmod_country_code(sp, pp, VRT_IP_string(sp, VRT_r_client_ip(sp)));
 }
 
-
 const char *
-vmod_region_name(struct sess *sp, struct vmod_priv *pp, const char *ip)
+vmod_city_region_name(struct sess *sp, struct vmod_priv * pp, const char *ip)
 {
-	GeoIPRegion *gir;
 	const char* region = NULL;
+	GeoIP *gi_city = NULL;
+	GeoIPRecord *gir = NULL;
+	struct geoip_handlers *handlers = (struct geoip_handlers *) pp->priv;
 
-	if (!pp->priv) {
-		init_priv(pp);
+	if(handlers) {
+		gi_city = (GeoIP *) handlers->gi_city;
 	}
 
-	if (ip) {
-		if (gir = GeoIP_region_by_addr((GeoIP *)pp->priv, ip)) {
-			region = GeoIP_region_name_by_code(gir->country_code, gir->region);
-			// TODO: is gir* a local copy or the actual record?
-			GeoIPRegion_delete(gir);
+	if (ip && gi_city) {
+		if (gir = GeoIP_record_by_addr(gi_city, ip)) {
+			if(gir->region) {
+				region = WS_Dup(sp->wrk->ws, gir->region);
+			}
+			GeoIPRecord_delete(gir);
 		}
 	}
 
-	return(WS_Dup(sp->wrk->ws, (region ? region : GI_UNKNOWN_STRING)));
-}
+	if(!region) {
+		region = WS_Dup(sp->wrk->ws, GI_UNKNOWN_STRING);
+	}
 
-const char *
-vmod_client_region_name(struct sess *sp, struct vmod_priv *pp) {
-	return vmod_region_name(sp, pp, VRT_IP_string(sp, VRT_r_client_ip(sp)));
+	return(region);
 }
 
 const char *
-vmod_ip_region_name(struct sess *sp, struct vmod_priv *pp, struct sockaddr_storage *ip) {
-	return vmod_region_name(sp, pp, VRT_IP_string(sp, ip));
+vmod_client_city_region_name(struct sess *sp, struct vmod_priv *pp)
+{
+	return vmod_city_region_name(sp, pp, VRT_IP_string(sp, VRT_r_client_ip(sp)));
 }
diff --git a/src/vmod_geoip.vcc b/src/vmod_geoip.vcc
index 1db7ac9..1716299 100644
--- a/src/vmod_geoip.vcc
+++ b/src/vmod_geoip.vcc
@@ -3,15 +3,8 @@ Init init_function
 
 ## look up two-letter country codes
 Function STRING country_code(PRIV_VCL, STRING)
-#Function STRING ip_country_code(PRIV_VCL, IP)
 Function STRING client_country_code(PRIV_VCL)
 
-## look up (english) country names
-Function STRING country_name(PRIV_VCL, STRING)
-#Function STRING ip_country_name(PRIV_VCL, IP)
-Function STRING client_country_name(PRIV_VCL)
-
-## region name functions not enabled yet
-#Function STRING region_name(PRIV_VCL, STRING)
-##Function STRING ip_region_name(PRIV_VCL, IP)
-#Function STRING client_region_name(PRIV_VCL)
+## look up region names via city database
+Function STRING city_region_name(PRIV_VCL, STRING)
+Function STRING client_city_region_name(PRIV_VCL)
