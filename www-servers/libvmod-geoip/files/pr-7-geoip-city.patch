From 413781c25ebea2a68223fc989619ddd6976abf9c Mon Sep 17 00:00:00 2001
From: Daniel Fredriksen <dfredriksen@odhroerir.com>
Date: Tue, 19 Aug 2014 19:24:50 +0000
Subject: [PATCH] Added *city_region* functionality to obtain region codes from
 free geoip databases provided by MaxMind

---
 README.rst           | 50 ++++++++++++++++++++++++++++++++++++++++++++--
 src/tests/test03.vtc | 22 +++++++++++++++++++++
 src/vmod_geoip.c     | 56 +++++++++++++++++++++++++++++++++++++++++++++-------
 src/vmod_geoip.vcc   |  5 +++++
 4 files changed, 124 insertions(+), 9 deletions(-)
 create mode 100644 src/tests/test03.vtc

diff --git a/README.rst b/README.rst
index b9ef0cd..ec3dd83 100644
--- a/README.rst
+++ b/README.rst
@@ -125,6 +125,41 @@ Example
 
                 set req.http.X-Country-Name = geoip.country_name("127.0.0.1");
 
+client_city_region_name
+-----------------------
+
+Prototype
+        ::
+
+                client_city_region_name()
+Return value
+	STRING
+Description
+	Returns region name string from client IP address using the GeoIPCity.dat database
+Example
+        ::
+
+                set req.http.X-Region-Name = geoip.client_city_region_name();
+
+city_region_name
+------------------------------
+
+Prototype
+        ::
+
+                city_region_name(STRING S)
+Return value
+	STRING
+Description
+	Returns region name string from given IP address using the GeoIPCity.dat database
+Example
+        ::
+
+                set req.http.X-Region-Name = geoip.city_region_name("127.0.0.1");
+
+
+
+
 
 client_region_name (not exported yet)
 -------------------------------------
@@ -186,6 +221,17 @@ Install the GeoIP library headers::
 
  apt-get install libgeoip-dev
 
+If you want to be able to use the city_region_name() and 
+client_city_region_name() functions, you will need to download the 
+GeoIPCity.dat (subscription) or GeoLiteCity.dat (free) databases from
+MaxMind (http://geolite.maxmind.com/download/geoip/database/).
+If you go with GeoLiteCity.dat, be sure to create a simlink named
+GeoIPCity.dat that points to GeoLiteCity.dat in the directory where
+GeoIP.dat resides (typically in /usr/local/share/GeoIP/). If you do
+not install this database, the third unit test will fail but you
+will still be able to use the country code and country name
+functions without a problem.
+
 To check out the current development source::
 
  git clone git://github.com/lampeh/libvmod-geoip.git
@@ -222,8 +268,8 @@ In your VCL you could then use this vmod along the following lines::
 HISTORY
 =======
 
-No history yet.
-
+* Region code functionality based on the GeoIPCity/GeoCityLite databases 
+from MaxMind were contributed by developers from www.dnainfo.com.
 
 COPYRIGHT
 =========
diff --git a/src/tests/test03.vtc b/src/tests/test03.vtc
new file mode 100644
index 0000000..acf7ca4
--- /dev/null
+++ b/src/tests/test03.vtc
@@ -0,0 +1,22 @@
+varnishtest "Test geoip vmod"
+
+server s1 {
+       rxreq
+       txresp
+} -start
+
+varnish v1 -vcl+backend {
+	import geoip from "${vmod_topbuild}/src/.libs/libvmod_geoip.so";
+
+	sub vcl_deliver {
+		set resp.http.X-Region = geoip.city_region_name("38.108.216.154");
+	}
+} -start
+
+client c1 {
+	txreq -url "/"
+	rxresp
+	expect resp.http.X-Region == "NY"
+}
+
+client c1 -run
diff --git a/src/vmod_geoip.c b/src/vmod_geoip.c
index 41c29c7..422952a 100644
--- a/src/vmod_geoip.c
+++ b/src/vmod_geoip.c
@@ -10,7 +10,7 @@
 
 #include <stdlib.h>
 #include <GeoIP.h>
-
+#include <GeoIPCity.h>
 #include "vrt.h"
 #include "vrt_obj.h"
 #include "bin/varnishd/cache.h"
@@ -30,11 +30,13 @@ init_function(struct vmod_priv *pp, const struct VCL_conf *conf)
 }
 
 static void
-init_priv(struct vmod_priv *pp) {
+init_priv(struct vmod_priv *pp, int type, int flags) {
+	//GeoIPCity.dat
+	//GeoIP.dat
 	// The README says:
 	// If GEOIP_MMAP_CACHE doesn't work on a 64bit machine, try adding
 	// the flag "MAP_32BIT" to the mmap call. MMAP is not avail for WIN32.
-	pp->priv = GeoIP_new(GEOIP_MMAP_CACHE);
+   	pp->priv = GeoIP_open_type(type, flags);
 	if (pp->priv != NULL) {
 		pp->free = (vmod_priv_free_f *)GeoIP_delete;
 		GeoIP_set_charset((GeoIP *)pp->priv, GEOIP_CHARSET_UTF8);
@@ -42,13 +44,16 @@ init_priv(struct vmod_priv *pp) {
 }
 
 
+
 const char *
 vmod_country_code(struct sess *sp, struct vmod_priv *pp, const char *ip)
 {
 	const char* country = NULL;
 
+	//GeoIP.dat is the default free database from MaxMind. It only maps country names to IP Addresses
+	//http://dev.maxmind.com/geoip/legacy/geolite/
 	if (!pp->priv) {
-		init_priv(pp);
+		init_priv(pp,1,GEOIP_MMAP_CACHE);
 	}
 
 	if (ip) {
@@ -74,8 +79,10 @@ vmod_country_name(struct sess *sp, struct vmod_priv *pp, const char *ip)
 {
 	const char* country = NULL;
 
+	//GeoIP.dat is the default free database from MaxMind. It only maps country names to IP Addresses
+	//http://dev.maxmind.com/geoip/legacy/geolite/
 	if (!pp->priv) {
-		init_priv(pp);
+		init_priv(pp,1,GEOIP_MMAP_CACHE);
 	}
 
 	if (ip) {
@@ -95,6 +102,40 @@ vmod_ip_country_name(struct sess *sp, struct vmod_priv *pp, struct sockaddr_stor
 	return vmod_country_name(sp, pp, VRT_IP_string(sp, ip));
 }
 
+const char *
+vmod_city_region_name(struct sess *sp, struct vmod_priv * pp, const char *ip)
+{
+	GeoIPRecord *gir;
+	const char* region = NULL;
+
+	//The GeoIPCity.dat file is a subscription file from MaxMind
+	//The free version, GeoCityLite.dat, can be downloaded from  http://dev.maxmind.com/geoip/legacy/geolite/ 
+	if (!pp->priv) {
+		init_priv(pp,2,GEOIP_MMAP_CACHE);
+	}
+
+	if (ip) {		
+		if (gir = GeoIP_record_by_addr((GeoIP *)pp->priv, ip)) {
+			region = gir->region;
+			GeoIPRecord_delete(gir);
+		}
+	}
+
+	return(WS_Dup(sp->wrk->ws, (region ? region : GI_UNKNOWN_STRING)));
+}
+
+const char *
+vmod_client_city_region_name(struct sess *sp, struct vmod_priv *pp) 
+{
+	return vmod_city_region_name(sp, pp, VRT_IP_string(sp, VRT_r_client_ip(sp)));
+}
+
+
+const char *
+vmod_ip_city_region_name(struct sess * sp, struct vmod_priv *pp, struct sockaddr_storage *ip)
+{
+	return vmod_city_region_name(sp, pp, VRT_IP_string(sp, ip));
+}
 
 const char *
 vmod_region_name(struct sess *sp, struct vmod_priv *pp, const char *ip)
@@ -102,8 +143,9 @@ vmod_region_name(struct sess *sp, struct vmod_priv *pp, const char *ip)
 	GeoIPRegion *gir;
 	const char* region = NULL;
 
-	if (!pp->priv) {
-		init_priv(pp);
+	//The GeoIPRegion.dat is a subscription service from MaxMind
+	if (!pp->priv) { 
+		init_priv(pp,3,GEOIP_MMAP_CACHE);
 	}
 
 	if (ip) {
diff --git a/src/vmod_geoip.vcc b/src/vmod_geoip.vcc
index 1db7ac9..03f3ace 100644
--- a/src/vmod_geoip.vcc
+++ b/src/vmod_geoip.vcc
@@ -11,6 +11,11 @@ Function STRING country_name(PRIV_VCL, STRING)
 #Function STRING ip_country_name(PRIV_VCL, IP)
 Function STRING client_country_name(PRIV_VCL)
 
+## look up region names via city database
+Function STRING city_region_name(PRIV_VCL, STRING)
+#Function STRING ip_city_region_name(PRIV_VCL, IP)
+Function STRING client_city_region_name(PRIV_VCL)
+
 ## region name functions not enabled yet
 #Function STRING region_name(PRIV_VCL, STRING)
 ##Function STRING ip_region_name(PRIV_VCL, IP)
